# # apiVersion: apps/v1
# # kind: Deployment
# # metadata:
# #   name: dinenit-api-app
# #   labels:
# #     app: dinenit-api-app
# # spec:
# #   replicas: 1  # Adjust as needed
# #   selector:
# #     matchLabels:
# #       app: dinenit-api-app
# #   template:
# #     metadata:
# #       labels:
# #         app: dinenit-api-app
# #         env: prod
# #     spec:
# #       containers:
# #         - name: dinenit-api-container
# #           image: dinenitacrdev.azurecr.io/dinenit-api-app:latest  # Change to your ACR image
# #           ports:
# #             - containerPort: 3001
# #           env:
# #             - name: NODE_ENV
# #               value: "production"
# #           resources:
# #             limits:
# #               cpu: "500m"
# #               memory: "512Mi"
# #             requests:
# #               cpu: "250m"
# #               memory: "256Mi"
# #           livenessProbe:
# #             httpGet:
# #               path: /api/
# #               port: 3001
# #             initialDelaySeconds: 10
# #             periodSeconds: 5
# #           readinessProbe:
# #             httpGet:
# #               path: /api/
# #               port: 3001
# #             initialDelaySeconds: 5
# #             periodSeconds: 5
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: dinenit-api-app
#   labels:
#     app: dinenit-api-app
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: dinenit-api-app
#   template:
#     metadata:
#       labels:
#         app: dinenit-api-app
#         env: prod
#     spec:
#       containers:
#         - name: dinenit-api-container
#           image: dinenitacrdev.azurecr.io/dinenit-api-app:latest
#           ports:
#             - containerPort: 3001
#           env:
#             - name: NODE_ENV
#               value: "production"
#             - name: DB_PASSWORD
#               valueFrom:
#                 secretKeyRef:
#                   name: dinenit-db-secret
#                   key: DB_PASSWORD
#           resources:
#             limits:
#               cpu: "500m"
#               memory: "512Mi"
#             requests:
#               cpu: "250m"
#               memory: "256Mi"
#           livenessProbe:
#             httpGet:
#               path: /api/
#               port: 3001
#             initialDelaySeconds: 10
#             periodSeconds: 5
#           readinessProbe:
#             httpGet:
#               path: /api/
#               port: 3001
#             initialDelaySeconds: 5
#             periodSeconds: 5
name: Node.js Build & Docker Build Pipeline

on:
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  clone:
    name: Clone Repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: List Files After Checkout
        run: ls -R

      - name: Upload Source Code
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: .

  build:
    name: Install Dependencies & Build
    runs-on: ubuntu-latest
    needs: clone
    steps:
      - name: Download Source Code
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install Dependencies
        run: npm install --legacy-peer-deps

      - name: Fix Dependency Conflicts (Downgrade React)
        run: npm install react@18.2.0 react-dom@18.2.0 --legacy-peer-deps

      - name: Install Next.js
        run: npm install next --legacy-peer-deps

      - name: Build Project
        run: npm run build --if-present || (echo "BUILD FAILED" && exit 1)

      - name: Create Tar Archive
        run: tar -cvf node-build.tar dockerfile app/ package.json package-lock.json .next/ next.config.mjs server.js k8s/ promethues/

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: node-build
          path: node-build.tar

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    environment: prod
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: node-build
          path: .

      - name: Extract Tar Archive
        run: tar -xvf node-build.tar

      - name: Log in to Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Docker Login to ACR
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Set Docker Image Name
        run: echo "IMAGE_NAME=${{ secrets.ACR_NAME }}.azurecr.io/dinenit-api-app:${{ github.sha }}" >> $GITHUB_ENV

      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME .

      - name: Push Docker Image to ACR
        run: |
          docker tag $IMAGE_NAME ${{ secrets.ACR_NAME }}.azurecr.io/dinenit-api-app:latest
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/dinenit-api-app:latest

      - name: Upload k8s folder
        uses: actions/upload-artifact@v4
        with:
          name: k8s-folder
          path: k8s/

      - name: Upload promethues folder
        uses: actions/upload-artifact@v4
        with:
          name: promethues-folder
          path: promethues/

  deploy-api-to-aks:
    name: Deploy api to AKS
    runs-on: ubuntu-latest
    needs: docker-build
    permissions:
      id-token: write
      contents: read
    environment: prod
    steps:
      - name: Download Deployment Files
        uses: actions/download-artifact@v4
        with:
          name: k8s-folder
          path: k8s/

      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Set Kubernetes Context
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Create Kubernetes Secret from Template
        run: |
          ENCODED_PASSWORD=$(echo -n "${{ secrets.DB_PASSWORD }}" | base64 | tr -d '\n')
          sed "s|REPLACE_ME_BASE64|$ENCODED_PASSWORD|" k8s/secret-template.yml > k8s/secret.yml

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f k8s/

      - name: Verify Deployment
        run: kubectl get pods -o wide

  deploy-promethues-to-aks:
    name: Deploy Promethues & cAdvisor to AKS
    runs-on: ubuntu-latest
    needs: deploy-api-to-aks
    permissions:
      id-token: write
      contents: read
    environment: prod
    steps:
      - name: Download Prometheus Files
        uses: actions/download-artifact@v4
        with:
          name: promethues-folder
          path: promethues/

      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Set Kubernetes Context
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Apply Prometheus Manifests
        run: |
          kubectl apply -f promethues/

      - name: Verify Deployment
        run: kubectl get pods -o wide
